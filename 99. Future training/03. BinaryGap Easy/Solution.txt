1st > 100%, just a comment: represented binary number is upside down, last bit has the highest value

using System;
// you can also use other imports, for example:
// using System.Collections.Generic;

// you can write to stdout for debugging purposes, e.g.
// Console.WriteLine("this is a debug message");

class Solution {
    public int solution(int N) {
        int maxGap = 0;
        int number = N;
        
        int zeroCounter = 0;
        bool hasOne = false;
        
        while(number > 0)
        {
            //int bit = 0;
            if(number % 2 > 0)
            {
                //bit = 1;
                hasOne = true;
                
                maxGap = Math.Max(maxGap, zeroCounter);

                zeroCounter = 0;
            }
            else
            {
                //bit = 0;
                if(hasOne)
                {
                    zeroCounter++;
                }
            }
            
            
            //Console.WriteLine(number + ":" + bit);
            
            number /= 2;
        }
        
        return maxGap;
    }
}