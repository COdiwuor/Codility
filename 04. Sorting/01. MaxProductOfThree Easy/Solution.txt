3rd > 100%, had to separate positives and negatives, added check for two big negatives (as they make one big positive)

using System;
using System.Linq;
// you can also use other imports, for example:
// using System.Collections.Generic;

// you can write to stdout for debugging purposes, e.g.
// Console.WriteLine("this is a debug message");

class Solution {
    public int solution(int[] A) {
        int N = A.Length;
        int[] twoBigNegatives = new int[2];
        int maxProductWithNegatives = 0;
        int maxProduct = 0;
        
        //use linq to sort array in descending order
        A = (from i in A orderby i descending select i).ToArray();
        
        //use linq to sort array in ascending order and get 2 big negatives for example [-7, -5]
        twoBigNegatives = (from i in A orderby i where i < 0 select i).Take(2).ToArray();
        
        if (twoBigNegatives != null && twoBigNegatives.Length > 1)
        {
            //take 2 largest elements from the list on negatives and multiply them with largest positive
            maxProductWithNegatives = twoBigNegatives[0] * twoBigNegatives[1] * A[0];
        }
        
        //take 3 largest elements from the list and multiply them
        maxProduct = A[0] * A[1] * A[2];
        
        if (maxProduct < maxProductWithNegatives)
        {
            maxProduct = maxProductWithNegatives;
        }
        
        return maxProduct;
    }
}


2nd > 77%, error on input [4, 7, 3, 2, 1, -3, -5], got 84 expected 105

using System;
using System.Linq;
// you can also use other imports, for example:
// using System.Collections.Generic;

// you can write to stdout for debugging purposes, e.g.
// Console.WriteLine("this is a debug message");

class Solution {
    public int solution(int[] A) {
        int N = A.Length;
        int maxProduct = 0;
        
        //use linq to sort array in descending order taking absolute values
        A = (from i in A orderby Math.Abs(i) descending select i).ToArray();
        
        //take 3 largest elements from the list and multiply them
        maxProduct = A[0] * A[1] * A[2];
        
        if (maxProduct < 0)
        {
            //use linq to sort array in descending order
            A = (from i in A orderby i descending select i).ToArray();
            
            //take 3 largest elements from the list and multiply them
            maxProduct = A[0] * A[1] * A[2];
        }
        
        return maxProduct;
    }
}


1st > 44%, error on input [-5, 5, -5, 4], got -100, expected 125; issue was with product of negative numbers giving larger positive then product of positive numbers (-5 * -5 = 25 * 5 = 125)

using System;
using System.Linq;
// you can also use other imports, for example:
// using System.Collections.Generic;

// you can write to stdout for debugging purposes, e.g.
// Console.WriteLine("this is a debug message");

class Solution {
    public int solution(int[] A) {
        int N = A.Length;
        int maxProduct = 0;
        
        //use linq to sort array in descending order
        A = (from i in A orderby i descending select i).ToArray();
        
        //take 3 largest elements from the list and multiply them
        maxProduct = A[0] * A[1] * A[2];
        
        return maxProduct;
    }
}